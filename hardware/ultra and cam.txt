#include "esp_camera.h"
#include <WiFi.h>
#include <HTTPClient.h>

// ==== Wi-Fi Credentials ====
const char* ssid = "Vandana";
const char* password = "vandana1407#";

// ==== Flask Server URL ====
const char* serverURL = "http://10.66.222.51:5001/upload";

// ==== Ultrasonic Pins ====
#define TRIG_PIN 13
#define ECHO_PIN 12
#define DIST_THRESHOLD 20  // cm

// ==== Camera Pins (AI Thinker) ====
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// =============================
void setup() {
  Serial.begin(115200);
  Serial.println("\nStarting ESP32-CAM with Ultrasonic...");

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // ==== Camera Config ====
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if (psramFound()) {
    config.frame_size = FRAMESIZE_QVGA; // 320x240 stable
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QQVGA;
    config.jpeg_quality = 15;
    config.fb_count = 1;
  }

  // ==== Init Camera ====
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed! 0x%x\n", err);
    delay(5000);
    ESP.restart();
  }

  // ==== Connect Wi-Fi ====
  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  int wifiTries = 0;
  while (WiFi.status() != WL_CONNECTED && wifiTries < 20) {
    delay(500);
    Serial.print(".");
    wifiTries++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✅ Wi-Fi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n❌ Wi-Fi failed. Restarting...");
    delay(3000);
    ESP.restart();
  }
}

// =============================
// Measure distance (cm)
float getDistanceCM() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 25000); // 25ms timeout
  float distance = duration * 0.034 / 2;
  if (distance <= 0 || distance > 400) return -1;
  return distance;
}

// =============================
void captureAndUpload(int imageCount) {
  for (int i = 0; i < imageCount; i++) {
    Serial.printf("📸 Capturing image %d...\n", i + 1);
    camera_fb_t *fb = esp_camera_fb_get();

    if (!fb) {
      Serial.println("Camera capture failed!");
      delay(2000);
      continue;
    }

    Serial.printf("Captured %u bytes\n", fb->len);

    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;
      http.begin(serverURL);
      http.addHeader("Content-Type", "image/jpeg");
      http.addHeader("Device", "safety-kit");

      int httpResponseCode = http.POST(fb->buf, fb->len);
      if (httpResponseCode > 0) {
        Serial.printf("✅ Upload success, code: %d\n", httpResponseCode);
      } else {
        Serial.printf("❌ Upload failed: %s\n",
                      http.errorToString(httpResponseCode).c_str());
      }
      http.end();
    } else {
      Serial.println("Wi-Fi not connected!");
    }

    esp_camera_fb_return(fb);
    delay(2000); // small gap between shots
  }
}

// =============================
void loop() {
  float distance = getDistanceCM();
  if (distance > 0) {
    Serial.printf("Distance: %.2f cm\n", distance);
  } else {
    Serial.println("Out of range");
  }

  if (distance > 0 && distance <= DIST_THRESHOLD) {
    Serial.println("🚨 Object detected within range!");
    captureAndUpload(3);  // take 3 photos
    delay(5000);          // wait before next detection
  }

  delay(500);
} to this u add
